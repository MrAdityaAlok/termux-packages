# Use ghc-pkg compiled for host to recache.

--- ghc/hadrian/bindist/Makefile	2023-10-07 08:28:11.000000000 +0530
+++ ghc.mod/hadrian/bindist/Makefile	2024-01-31 19:28:31.809733994 +0530
@@ -235,7 +235,7 @@
 	@echo "Updating the package DB"
 	$(foreach p, $(PKG_CONFS),\
 		$(call patchpackageconf,$(shell echo $(notdir $p) | sed 's/-[0-9.]*-[0-9a-zA-Z]*\.conf//g'),$(shell echo "$p" | sed 's:\0xxx\0:   :g'),$(docdir),$(shell mk/relpath.sh "$(ActualLibsDir)" "$(docdir)"),$(shell echo $(notdir $p) | sed 's/.conf//g')))
-	'$(DESTDIR)$(ActualBinsDir)/$(CrossCompilePrefix)ghc-pkg' --global-package-db "$(DESTDIR)$(ActualLibsDir)/package.conf.d" recache
+	../../stage0/bin/$(CrossCompilePrefix)ghc-pkg --global-package-db "$(DESTDIR)$(ActualLibsDir)/package.conf.d" recache
 
 install_mingw:
 	@echo "Installing MingGW"


--- ghc/hadrian/src/Rules/BinaryDist.hs	2023-10-07 08:28:11.000000000 +0530
+++ ghc.mod/hadrian/src/Rules/BinaryDist.hs	2024-02-03 02:43:30.330376067 +0530
@@ -201,8 +201,8 @@
         --
         -- N.B. the ghc-pkg executable may be prefixed with a target triple
         -- (c.f. #20267).
-        ghcPkgName <- programName (vanillaContext Stage1 ghcPkg)
-        cmd_ (bindistFilesDir -/- "bin" -/- ghcPkgName) ["recache"]
+        ghcPkgName <- programName (vanillaContext stage0InTree ghcPkg)
+        cmd_ (bindistFilesDir -/- "../.." -/- "stage0" -/- "bin" -/- ghcPkgName) ["recache"]
 
 
         -- The settings file must be regenerated by the bindist installation
@@ -386,17 +386,24 @@
 -- | Which wrappers point to a specific package
 pkgToWrappers :: Package -> Action [String]
 pkgToWrappers pkg = do
-    prefix <- crossPrefix
-    if  -- ghc also has the ghci script wrapper
-        -- N.B. programName would add the crossPrefix therefore we must do the
-        -- same here.
-      | pkg == ghc    -> pure $ map (prefix++) ["ghc", "ghci"]
-      | pkg == runGhc -> pure $ map (prefix++) ["runghc", "runhaskell"]
-        -- These are the packages which we want to expose to the user and hence
-        -- there are wrappers installed in the bindist.
-      | pkg `elem` [hpcBin, haddock, hp2ps, hsc2hs, ghc, ghcPkg]
-                      -> (:[]) <$> (programName =<< programContext Stage1 pkg)
-      | otherwise     -> pure []
+  prefix <- crossPrefix
+  let strippedProgramName name = stripCrossPrefix prefix name
+
+  if pkg == ghc
+    then pure $ map strippedProgramName ["ghc", "ghci"]
+    else if pkg == runGhc
+      then pure $ map strippedProgramName ["runghc", "runhaskell"]
+      else if pkg `elem` [hpcBin, haddock, hp2ps, hsc2hs, ghc, ghcPkg]
+        then (:[]) <$> do
+          programName' <- programName =<< programContext Stage1 pkg  -- Execute programName within the monad
+          pure (strippedProgramName programName')
+        else pure []
+
+stripCrossPrefix :: String -> String -> String
+stripCrossPrefix prefix name =
+  if prefix `isPrefixOf` name
+    then drop (length prefix) name
+    else name
 
 wrapper :: FilePath -> Action String
 wrapper "ghc"         = ghcWrapper
